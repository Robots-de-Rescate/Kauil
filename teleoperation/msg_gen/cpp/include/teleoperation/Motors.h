/* Auto-generated by genmsg_cpp for file /home/parallels/fuerte_workspace/teleoperation/msg/Motors.msg */
#ifndef TELEOPERATION_MESSAGE_MOTORS_H
#define TELEOPERATION_MESSAGE_MOTORS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace teleoperation
{
template <class ContainerAllocator>
struct Motors_ {
  typedef Motors_<ContainerAllocator> Type;

  Motors_()
  : MotorLeft(0)
  , MotorRight(0)
  {
  }

  Motors_(const ContainerAllocator& _alloc)
  : MotorLeft(0)
  , MotorRight(0)
  {
  }

  typedef int16_t _MotorLeft_type;
  int16_t MotorLeft;

  typedef int16_t _MotorRight_type;
  int16_t MotorRight;


  typedef boost::shared_ptr< ::teleoperation::Motors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teleoperation::Motors_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Motors
typedef  ::teleoperation::Motors_<std::allocator<void> > Motors;

typedef boost::shared_ptr< ::teleoperation::Motors> MotorsPtr;
typedef boost::shared_ptr< ::teleoperation::Motors const> MotorsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::teleoperation::Motors_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::teleoperation::Motors_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace teleoperation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::teleoperation::Motors_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::teleoperation::Motors_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::teleoperation::Motors_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8190e347f82924a3dacda1485c60de6a";
  }

  static const char* value(const  ::teleoperation::Motors_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8190e347f82924a3ULL;
  static const uint64_t static_value2 = 0xdacda1485c60de6aULL;
};

template<class ContainerAllocator>
struct DataType< ::teleoperation::Motors_<ContainerAllocator> > {
  static const char* value() 
  {
    return "teleoperation/Motors";
  }

  static const char* value(const  ::teleoperation::Motors_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::teleoperation::Motors_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 MotorLeft\n\
int16 MotorRight\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::teleoperation::Motors_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::teleoperation::Motors_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::teleoperation::Motors_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.MotorLeft);
    stream.next(m.MotorRight);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Motors_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teleoperation::Motors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::teleoperation::Motors_<ContainerAllocator> & v) 
  {
    s << indent << "MotorLeft: ";
    Printer<int16_t>::stream(s, indent + "  ", v.MotorLeft);
    s << indent << "MotorRight: ";
    Printer<int16_t>::stream(s, indent + "  ", v.MotorRight);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TELEOPERATION_MESSAGE_MOTORS_H

