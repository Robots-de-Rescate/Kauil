/* Auto-generated by genmsg_cpp for file /home/kauil/fuerte_workspace/encoder/msg/encoder.msg */
#ifndef ENCODER_MESSAGE_ENCODER_H
#define ENCODER_MESSAGE_ENCODER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace encoder
{
template <class ContainerAllocator>
struct encoder_ {
  typedef encoder_<ContainerAllocator> Type;

  encoder_()
  : izq(0)
  , der(0)
  {
  }

  encoder_(const ContainerAllocator& _alloc)
  : izq(0)
  , der(0)
  {
  }

  typedef int32_t _izq_type;
  int32_t izq;

  typedef int32_t _der_type;
  int32_t der;


  typedef boost::shared_ptr< ::encoder::encoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::encoder::encoder_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct encoder
typedef  ::encoder::encoder_<std::allocator<void> > encoder;

typedef boost::shared_ptr< ::encoder::encoder> encoderPtr;
typedef boost::shared_ptr< ::encoder::encoder const> encoderConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::encoder::encoder_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::encoder::encoder_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace encoder

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::encoder::encoder_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::encoder::encoder_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::encoder::encoder_<ContainerAllocator> > {
  static const char* value() 
  {
    return "44cd1e2362e72574bc175ff0d1538977";
  }

  static const char* value(const  ::encoder::encoder_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x44cd1e2362e72574ULL;
  static const uint64_t static_value2 = 0xbc175ff0d1538977ULL;
};

template<class ContainerAllocator>
struct DataType< ::encoder::encoder_<ContainerAllocator> > {
  static const char* value() 
  {
    return "encoder/encoder";
  }

  static const char* value(const  ::encoder::encoder_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::encoder::encoder_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 izq\n\
int32 der\n\
\n\
";
  }

  static const char* value(const  ::encoder::encoder_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::encoder::encoder_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::encoder::encoder_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.izq);
    stream.next(m.der);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct encoder_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::encoder::encoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::encoder::encoder_<ContainerAllocator> & v) 
  {
    s << indent << "izq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.izq);
    s << indent << "der: ";
    Printer<int32_t>::stream(s, indent + "  ", v.der);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ENCODER_MESSAGE_ENCODER_H

